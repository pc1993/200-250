class TrieNode {
public:
    char content; //the character included
    bool isend;   //if the node is the end of a word
    int shared;   //the number of the node shared,convenient to implement delete(string key) ,not necessary
    vector<TrieNode*> children; //the children of the node;
    /** Initialize your data structure here. */
    TrieNode():content(' '),isend(false),shared(0) {}
    TrieNode(char ch):content(ch),isend(false),shared(0) {}
    TrieNode* subNode(char ch)
    {
        if(!children.empty())
        {
            for(auto child:children)
            {
                if(child->content==ch)
                    return child;
            }
        }
        return NULL;
    }
    ~TrieNode()
    {
        for(auto child:children)
            delete child;
    }
};
class Trie{
public:
    Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        if(search(word)) return;
        TrieNode* cur=root;
        for(auto ch:word)
        {
            TrieNode* child=cur->subNode(ch);
            if(child!=NULL)
            {
                cur=child;
            }
            else
            {
                TrieNode *newNode=new TrieNode(ch);
                cur->children.push_back(newNode);
                cur=newNode;
            }
            ++cur->shared;
        }
        cur->isend=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* cur=root;
        for(auto ch:word)
        {
            cur=cur->subNode(ch);
            if(cur==NULL)
                return false;
        }
        return cur->isend==true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* cur=root;
        for(auto ch:prefix)
        {
            cur=cur->subNode(ch);
            if(cur==NULL)
                return false;
        }
        return true;
    }
    ~Trie()
    {
        delete root;
    }
private:
    TrieNode* root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */

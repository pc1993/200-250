O(n)
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        int start=0;
        int res=INT_MAX;
        int sum=0;
        for(int i=0;i<n;++i)
        {
            sum+=nums[i];
            while(sum>=s)
            {
                res=min(res,i-start+1);
                sum-=nums[start++];
            }
        }
        return res==INT_MAX?0:res;
    }
};


class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size();
        vector<int> sum(n+1,0);
        int res=INT_MAX;
        for(int i=1;i<=n;++i)
            sum[i]=nums[i-1]+sum[i-1];
        for(int i=1;i<=n;++i)
        {
            if(sum[i]>=s)
            {
                int p=findbound(i,sum,sum[i]-s);
                if(p!=-1)
                {
                    res=min(res,i-p+1);
                }
            }
        }
        return res==INT_MAX?0:res;
    }
    int findbound(int right,vector<int>& sum,int target)
    {
        int l=0;
        int r=right;
        while(l<r)
        {
            int m=l+((r-l)>>1);
            if(sum[m]<=target)
            {
                l=m+1;
            }
            else
            {
                r=m;
            }
        }
        return sum[r]>target?r:-1;
    }
};
